/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */
package org.netbeans.modules.jdk.project.customizer;

import java.awt.Component;
import java.util.EnumMap;
import java.util.Map;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

import org.netbeans.modules.jdk.project.JDKProject;
import org.netbeans.modules.jdk.project.Settings;
import org.netbeans.modules.jdk.project.Settings.RunBuild;
import org.netbeans.spi.project.ui.support.ProjectCustomizer.Category;
import org.netbeans.spi.project.ui.support.ProjectCustomizer.CompositeCategoryProvider;
import org.openide.util.Lookup;

/**
 *
 * @author lahvac
 */
public class TestCategory extends javax.swing.JPanel {

    /**
     * Creates new form TestCategory
     */
    public TestCategory(RunBuild runBuild) {
        initComponents();
        this.buildBeforeTest.getModel().setSelectedItem(runBuild);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buildBeforeTestLabel = new javax.swing.JLabel();
        buildBeforeTest = new javax.swing.JComboBox<>();

        buildBeforeTestLabel.setLabelFor(buildBeforeTest);
        org.openide.awt.Mnemonics.setLocalizedText(buildBeforeTestLabel, org.openide.util.NbBundle.getMessage(TestCategory.class, "TestCategory.buildBeforeTestLabel.text")); // NOI18N

        buildBeforeTest.setModel(runBuildModel());
        buildBeforeTest.setFocusCycleRoot(true);
        buildBeforeTest.setRenderer(runBuildRenderer());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buildBeforeTestLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buildBeforeTest, 0, 173, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buildBeforeTestLabel)
                    .addComponent(buildBeforeTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(264, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<RunBuild> buildBeforeTest;
    private javax.swing.JLabel buildBeforeTestLabel;
    // End of variables declaration//GEN-END:variables

    private ListCellRenderer<Object> runBuildRenderer() {
        return new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (value instanceof RunBuild) {
                    value = runBuildDisplayName.getOrDefault(value, String.valueOf(value));
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        };
    }

    private ComboBoxModel<RunBuild> runBuildModel() {
        DefaultComboBoxModel<RunBuild> model = new DefaultComboBoxModel<>();

        for (RunBuild rb : RunBuild.values()) {
            model.addElement(rb);
        }

        return model;
    }

    private static final Map<RunBuild, String> runBuildDisplayName = new EnumMap<RunBuild, String>(RunBuild.class) {{
        put(RunBuild.ALWAYS, "Always");
//        put(RunBuild.SMART, "Smart");
        put(RunBuild.NEVER, "Never");
    }};

    @CompositeCategoryProvider.Registration(projectType=JDKProject.PROJECT_KEY)
    public static CompositeCategoryProvider createCategoryProvider() {
        return new CompositeCategoryProvider() {
            @Override
            public Category createCategory(Lookup context) {
                if (context.lookup(Settings.class) != null)
                    return Category.create("test", "Test", null);
                return null;
            }
            @Override
            public JComponent createComponent(Category category, Lookup context) {
                Settings settings = context.lookup(Settings.class);
                TestCategory panel = new TestCategory(settings.getRunBuildSetting());
                category.setOkButtonListener(evt -> settings.setRunBuildSetting((RunBuild) panel.buildBeforeTest.getSelectedItem()));
                category.setStoreListener(evt -> settings.flush());
                return panel;
            }
        };
    }
}
