diff -r b1a0023720e8 make/build.xml
--- a/make/build.xml	Thu Nov 10 20:09:05 2016 +0100
+++ b/make/build.xml	Thu Nov 10 20:13:22 2016 +0100
@@ -175,7 +175,7 @@
             debug="true" debuglevel="source,lines"
             srcdir="${src.classes.dir}"
             destdir="${build.classes.dir}"
-            classpath="${build.classes.dir}:${javatest.jar}:${junit.jar}:${testng.jar}"
+            classpath="${build.classes.dir}:${javatest.jar}:${jh.jar}:${junit.jar}:${testng.jar}"
             includeantruntime="true">
             <compilerarg line="-Xlint:all"/>
             <patternset refid="jtreg.packages"/>
diff -r b1a0023720e8 src/share/classes/com/sun/javatest/regtest/ActionCallBack.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/share/classes/com/sun/javatest/regtest/ActionCallBack.java	Thu Nov 10 20:13:22 2016 +0100
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package com.sun.javatest.regtest;
+
+import java.util.List;
+import com.sun.javatest.regtest.exec.Action;
+
+public interface ActionCallBack {
+
+    public void actionStarted(Action action);
+
+    public List<String> getAdditionalVMJavaOptions(Action action);
+
+    public void actionEnded(Action action);
+
+}
diff -r b1a0023720e8 src/share/classes/com/sun/javatest/regtest/config/JDK.java
--- a/src/share/classes/com/sun/javatest/regtest/config/JDK.java	Thu Nov 10 20:09:05 2016 +0100
+++ b/src/share/classes/com/sun/javatest/regtest/config/JDK.java	Thu Nov 10 20:13:22 2016 +0100
@@ -96,6 +96,10 @@
 
     private static final Map<File, JDK> cache = new HashMap<>();
 
+    public static synchronized void clearCache() {
+        cache.clear();
+    }
+
     /**
      * Creates a JDK object, given its "$JAVA_HOME" path.
      * @param javaHome the "home" directory for the JDK
@@ -414,7 +418,8 @@
                                 new LinkedHashSet<>(Arrays.asList(m.split(" +"))));
                     }
                 } catch (Fault f) {
-                    throw new IllegalStateException(f);
+                    info.systemModules = Collections.emptySet();
+//                    throw new IllegalStateException(f);
                 }
             } else {
                 info.systemModules = Collections.emptySet();
diff -r b1a0023720e8 src/share/classes/com/sun/javatest/regtest/config/RegressionParameters.java
--- a/src/share/classes/com/sun/javatest/regtest/config/RegressionParameters.java	Thu Nov 10 20:09:05 2016 +0100
+++ b/src/share/classes/com/sun/javatest/regtest/config/RegressionParameters.java	Thu Nov 10 20:13:22 2016 +0100
@@ -51,6 +51,7 @@
 import com.sun.javatest.TestEnvironment;
 import com.sun.javatest.TestFilter;
 import com.sun.javatest.interview.BasicInterviewParameters;
+import com.sun.javatest.regtest.ActionCallBack;
 import com.sun.javatest.regtest.agent.JDK_Version;
 import com.sun.javatest.regtest.agent.SearchPath;
 import com.sun.javatest.regtest.exec.TimeoutHandlerProvider;
@@ -1106,4 +1107,15 @@
     private List<String> retainArgs;
     private final Set<Integer> retainStatusSet = new HashSet<>(4);
     private Pattern retainFilesPattern;
+
+    private ActionCallBack callBack;
+
+    public ActionCallBack getCallBack() {
+        return callBack;
+    }
+
+    public void setCallBack(ActionCallBack callBack) {
+        this.callBack = callBack;
+    }
+
 }
diff -r b1a0023720e8 src/share/classes/com/sun/javatest/regtest/exec/Action.java
--- a/src/share/classes/com/sun/javatest/regtest/exec/Action.java	Thu Nov 10 20:09:05 2016 +0100
+++ b/src/share/classes/com/sun/javatest/regtest/exec/Action.java	Thu Nov 10 20:13:22 2016 +0100
@@ -44,6 +44,7 @@
 
 import com.sun.javatest.Status;
 import com.sun.javatest.TestResult;
+import com.sun.javatest.regtest.ActionCallBack;
 import com.sun.javatest.regtest.agent.ActionHelper;
 import com.sun.javatest.regtest.agent.Flags;
 import com.sun.javatest.regtest.agent.SearchPath;
@@ -314,6 +315,12 @@
      * @param initConfig whether or not to initialize a configuration section
      */
     protected void startAction(boolean initConfig) {
+        ActionCallBack callBack = script.getCallBack();
+
+        if (callBack != null) {
+            callBack.actionStarted(this);
+        }
+
         String name = getName();
         section = script.getTestResult().createSection(name);
 
@@ -341,6 +348,12 @@
         pw.println(LOG_ELAPSED_TIME + ((double) elapsedTime/1000.0));
         recorder.close();
         section.setStatus(status);
+
+        ActionCallBack callBack = script.getCallBack();
+
+        if (callBack != null) {
+            callBack.actionEnded(this);
+        }
     } // endAction()
 
     //----------workarounds-------------------------------------------------------
diff -r b1a0023720e8 src/share/classes/com/sun/javatest/regtest/exec/CompileAction.java
--- a/src/share/classes/com/sun/javatest/regtest/exec/CompileAction.java	Thu Nov 10 20:09:05 2016 +0100
+++ b/src/share/classes/com/sun/javatest/regtest/exec/CompileAction.java	Thu Nov 10 20:13:22 2016 +0100
@@ -50,6 +50,7 @@
 import java.util.concurrent.TimeUnit;
 
 import com.sun.javatest.Status;
+import com.sun.javatest.regtest.ActionCallBack;
 import com.sun.javatest.regtest.TimeoutHandler;
 import com.sun.javatest.regtest.agent.CompileActionHelper;
 import com.sun.javatest.regtest.agent.JDK_Version;
@@ -521,6 +522,12 @@
         String javacCmd = script.getJavacProg();
 
         JDKOpts javacVMOpts = new JDKOpts();
+        ActionCallBack callBack = script.getCallBack();
+
+        if (callBack != null) {
+            javacVMOpts.addAll(callBack.getAdditionalVMJavaOptions(this));
+        }
+
         javacVMOpts.addAll(script.getTestVMOptions());
         if (addDebugOpts && script.getCompileJDK().equals(script.getTestJDK()))
             javacVMOpts.addAll(script.getTestDebugOptions());
diff -r b1a0023720e8 src/share/classes/com/sun/javatest/regtest/exec/MainAction.java
--- a/src/share/classes/com/sun/javatest/regtest/exec/MainAction.java	Thu Nov 10 20:09:05 2016 +0100
+++ b/src/share/classes/com/sun/javatest/regtest/exec/MainAction.java	Thu Nov 10 20:13:22 2016 +0100
@@ -42,6 +42,7 @@
 import java.util.concurrent.TimeUnit;
 
 import com.sun.javatest.Status;
+import com.sun.javatest.regtest.ActionCallBack;
 import com.sun.javatest.regtest.TimeoutHandler;
 import com.sun.javatest.regtest.agent.MainWrapper;
 import com.sun.javatest.regtest.agent.SearchPath;
@@ -446,6 +447,12 @@
         javaOpts.addAll(script.getTestVMJavaOptions());
         javaOpts.addAll(script.getTestDebugOptions());
 
+        ActionCallBack callBack = script.getCallBack();
+
+        if (callBack != null) {
+            javaOpts.addAll(new ArrayList<String>(callBack.getAdditionalVMJavaOptions(this)));
+        }
+
         Map<String, String> javaProps = new LinkedHashMap<>();
         javaProps.putAll(script.getTestProperties());
 
diff -r b1a0023720e8 src/share/classes/com/sun/javatest/regtest/exec/RegressionScript.java
--- a/src/share/classes/com/sun/javatest/regtest/exec/RegressionScript.java	Thu Nov 10 20:09:05 2016 +0100
+++ b/src/share/classes/com/sun/javatest/regtest/exec/RegressionScript.java	Thu Nov 10 20:13:22 2016 +0100
@@ -54,6 +54,7 @@
 import com.sun.javatest.TestEnvironment;
 import com.sun.javatest.TestResult;
 import com.sun.javatest.TestSuite;
+import com.sun.javatest.regtest.ActionCallBack;
 import com.sun.javatest.regtest.agent.JDK_Version;
 import com.sun.javatest.regtest.agent.SearchPath;
 import com.sun.javatest.regtest.config.ExecMode;
@@ -1010,6 +1011,10 @@
         return params.getCompileJDK().getJavacProg().getPath();
     }
 
+    ActionCallBack getCallBack() {
+        return params.getCallBack();
+    }
+
     //--------------------------------------------------------------------------
 
     // Get the standard properties to be set for tests
diff -r b1a0023720e8 src/share/classes/com/sun/javatest/regtest/tool/Tool.java
--- a/src/share/classes/com/sun/javatest/regtest/tool/Tool.java	Thu Nov 10 20:09:05 2016 +0100
+++ b/src/share/classes/com/sun/javatest/regtest/tool/Tool.java	Thu Nov 10 20:13:22 2016 +0100
@@ -72,6 +72,7 @@
 import com.sun.javatest.exec.ExecToolManager;
 import com.sun.javatest.httpd.HttpdServer;
 import com.sun.javatest.httpd.PageGenerator;
+import com.sun.javatest.regtest.ActionCallBack;
 import com.sun.javatest.regtest.BadArgs;
 import com.sun.javatest.regtest.Main;
 import com.sun.javatest.regtest.Main.Fault;
@@ -118,6 +119,8 @@
  */
 public class Tool {
 
+    public static ActionCallBack callBack;
+
     /**
      * Standard entry point. Only returns if GUI mode is initiated; otherwise, it calls System.exit
      * with an appropriate exit code.
@@ -998,10 +1001,10 @@
             Version requiredVersion = ts.getRequiredVersion();
             Version currentVersion = Version.getCurrent();
             if (requiredVersion.compareTo(currentVersion) > 0) {
-                throw new Fault(i18n, "main.requiredVersion",
-                        ts.getPath(),
-                        requiredVersion.version, requiredVersion.build,
-                        currentVersion.version, currentVersion.build);
+                err.println(i18n.getString("main.requiredVersion", new Object[] {
+                                           ts.getPath(),
+                                           requiredVersion.version, requiredVersion.build,
+                                           currentVersion.version, currentVersion.build}));
             }
         }
 
@@ -1608,6 +1611,8 @@
 
             rp.initExprContext(); // will invoke/init jdk.getProperties(params)
 
+            rp.setCallBack(callBack);
+
             return rp;
         } catch (TestSuite.Fault f) {
             // TODO: fix bad string -- need more helpful resource here
